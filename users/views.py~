# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.conf import settings
from django.contrib import auth, messages
from django.contrib.auth.decorators import login_required
from users.forms import RestrictedMemberChangeForm, MemberLoginForm, MemberRegisterForm, MemberResendVerificationMailForm, ForgotForm
from users.models import Member, PassKey
from django.core.mail import send_mail
from django.http import HttpResponseRedirect
from django.utils.http import is_safe_url
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext as _
import random
import string


# Create your views here.

@login_required
def edit_profile(request):
    current_user = Member.objects.get(pk=request.user.id)
    if request.method == "POST":
        form = RestrictedMemberChangeForm(request.POST, instance=current_user)
        if form.is_valid():
            form.save()
            auth.update_session_auth_hash(request, current_user)
            messages.success(request, _("Your profile has been updated successfully"))
            return HttpResponseRedirect(reverse("users:edit_profile"))
    else:
        form = RestrictedMemberChangeForm(instance=current_user)

    return render(request, "users/edit_profile.html", {"form": form})

def rng(size=6,chars =  string.digits):
	return ''.join(random.choice(chars) for _ in range(size))
def id_generator(size=6, chars=string.ascii_uppercase + string.digits + string.ascii_lowercase):
	return ''.join(random.choice(chars) for _ in range(size))
def rnd(size):
	return id_generator(size)

def get_next_page(request, default_redirect=reverse("index")):
    redirect_to = request.POST.get("next",
                                   request.GET.get("next", default_redirect))
    if not is_safe_url(redirect_to, request.get_host()):
        redirect_to = default_redirect
    return redirect_to


def login(request):
    redirect_to = get_next_page(request)
    if request.user.is_authenticated():
        return HttpResponseRedirect(redirect_to)
    if request.method == "POST" and 'login_button' in request.POST:
        login_form = MemberLoginForm(request.POST, prefix="login")

        if login_form.is_valid():
            auth.login(request, login_form.get_user())
            messages.success(request, _("You have successfully logged in"))
            return HttpResponseRedirect(redirect_to)
    else:
        login_form = MemberLoginForm(prefix="login")

    if request.method == "POST" and 'resend_verification_mail_button' in request.POST:
        resend_form = MemberResendVerificationMailForm(request.POST, prefix="resend")
        if resend_form.is_valid():
            resend_form.get_user().send_verification_mail()
            messages.success(request, _("A new verification mail has been sent to your email address"))
            return HttpResponseRedirect(reverse("users:login"))
    else:
        resend_form = MemberResendVerificationMailForm(prefix="resend")

    return render(request, "users/login.html", {"login_form": login_form,
                                                "resend_verification_mail_form": resend_form})


def logout(request):
    redirect_to = get_next_page(request)

    auth.logout(request)
    messages.success(request, _("You have successfully logged out"))
    return HttpResponseRedirect(redirect_to)


def register(request):
    redirect_to = reverse("index")

    if request.user.is_authenticated():
        return HttpResponseRedirect(redirect_to)
    elif request.method == "POST":
        form = MemberRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            return render(request, "users/register_success.html")
    else:
        form = MemberRegisterForm()
    return render(request, "users/register.html", {"form": form})


def verify(request, verification_code):
    try:
        user = Member.objects.get(verification_code=verification_code)
        user.verify()
        user.save()
        messages.success(request, _("Your user has been verified. You can now login using the login form."))
    except Member.DoesNotExist:
        messages.error(request, _("Invalid verification code"))
    return HttpResponseRedirect(reverse("index"))
    
def forgot(request):
	redirect_to = get_next_page(request)
	if request.user.is_authenticated():
		return HttpResponseRedirect(redirect_to)
	form = ForgotForm()
	error = ""
	if request.method == "POST":
		form = ForgotForm(request.POST)
		if form.is_valid():
			un = form.cleaned_data['username']
			try:
				user = Member.objects.get(username=un)
				key = rnd(256)
				while PassKey.objects.filter(key=key).count() > 0:
					key = rnd(256)
				p = PassKey(user = user, active = True, key = key)
				p.save()
				u = "http://mcexam-sh44zzz.rhcloud.com/remember/" + key + "/"
				f = 'کاربر گرامی، اگر رمزعبور خود را فراموش کرده اید میتوانید برای بازنشانی رمز عبور به '
				l = ' مراجعه نمایید.'
				send_mail('بازنشانی رمزعبور ‌سیستم مرحله ۱ شاززز', f + u + l,settings.EMAIL_HOST_USER, [str(user.email)], fail_silently=True)
				error = "<font color = green>ایمیلی مربوط به بازنشانی رمزعبور برای شما فرستاده شده است که به زودی آن را دریافت خواهید کرد.</font>"
				return render(request, 'users/forgot.html', {'error': error, "LOGIN" : 1})
			except Member.DoesNotExist:
				error = "<font color = red>کاربری با چنین نام کاربری موجود نیست.</font>"
				
	return render(request, 'users/forgot.html', {'error': error, 'form' : form, "LOGIN" : 1})
def remember(request, key):
	redirect_to = get_next_page(request)
	if request.user.is_authenticated():
		return HttpResponseRedirect(redirect_to)
	error = ""
	key = str(key)
	if PassKey.objects.filter(key=key, active=True).count() < 1:
		error = "<font color = red>کلید موجود نیست! </font>"
	else:
		p = PassKey.objects.get(key = key)
		p.active = False
		p.save()
		pas = rnd(8)
		f = "رمز عبور جدید شما برابر "
		l = " است. در اسرع وقت آن را تغییر دهید."
		error = "<font color = green>" + f + pas + l + "</font>"
		user = Member.objects.get(username = p.user.username)
		user.set_password(pas)
		user.save()
	return render(request, 'users/remember.html', {'error': error,  "LOGIN" : 1})
